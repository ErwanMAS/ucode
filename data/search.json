{"list":[{"title":"module:core","link":"<a href=\"module-core.html\">core</a>","description":"<h1 id=\"builtin-functions\">Builtin functions</h1>\n<p>The core namespace is not an actual module but refers to the set of\nbuiltin functions and properties available to <code>ucode</code> scripts.</p>"},{"title":"module:core#arrtoip","link":"<a href=\"module-core.html#arrtoip\">arrtoip</a>","description":"<p>Convert the given input array of byte values to an IP address string.</p>\n<p>Input arrays of length 4 are converted to IPv4 addresses, arrays of length 16\nto IPv6 ones. All other lengths are rejected. If any array element is not an\ninteger or exceeds the range 0..255 (inclusive), the array is rejected.</p>\n<p>Returns a string containing the formatted IP address.\nReturns <code>null</code> if the input array was invalid.</p>"},{"title":"module:core#assert","link":"<a href=\"module-core.html#assert\">assert</a>","description":"<p>Raise an exception with the given message parameter when the value in <code>cond</code>\nis not truish.</p>\n<p>When <code>message</code> is omitted, the default value is <code>Assertion failed</code>.</p>"},{"title":"module:core#b64dec","link":"<a href=\"module-core.html#b64dec\">b64dec</a>","description":"<p>Decodes the given base64 encoded string and returns the decoded result.</p>\n<ul>\n<li>If non-whitespace, non-base64 characters are encountered, if invalid\npadding or trailing garbage is found, the function returns <code>null</code>.</li>\n<li>If a non-string argument is given, the function returns <code>null</code>.</li>\n</ul>"},{"title":"module:core#b64enc","link":"<a href=\"module-core.html#b64enc\">b64enc</a>","description":"<p>Encodes the given string into base64 and returns the resulting string.</p>\n<ul>\n<li>If a non-string argument is given, the function returns <code>null</code>.</li>\n</ul>"},{"title":"module:core#call","link":"<a href=\"module-core.html#call\">call</a>","description":"<p>Calls the given function value with a modified environment.</p>\n<p>The given <code>ctx</code> argument is used as <code>this</code> context for the invoked function\nand the given <code>scope</code> value as global environment. Any further arguments are\npassed to the invoked function as-is.</p>\n<p>When <code>ctx</code> is omitted or <code>null</code>, the function will get invoked with <code>this</code>\nbeing <code>null</code>.</p>\n<p>When <code>scope</code> is omitted or <code>null</code>, the function will get executed with the\ncurrent global environment of the running program. When <code>scope</code> is set to a\ndictionary, the dictionary is used as global function environment.</p>\n<p>When the <code>scope</code> dictionary has no prototype, the current global environment\nwill be set as prototype, means the scope will inherit from it.</p>\n<p>When a scope prototype is set, it is kept. This allows passing an isolated\n(sandboxed) function scope without access to the global environment.</p>\n<p>Any further argument is forwarded as-is to the invoked function as function\ncall argument.</p>\n<p>Returns <code>null</code> if the given function value <code>fn</code> is not callable.</p>\n<p>Returns the return value of the invoked function in all other cases.</p>\n<p>Forwards exceptions thrown by the invoked function.</p>"},{"title":"module:core#chr","link":"<a href=\"module-core.html#chr\">chr</a>","description":"<p>Converts each given numeric value to a byte and return the resulting string.\nInvalid numeric values or values &lt; 0 result in <code>\\0</code> bytes, values larger than\n255 are truncated to 255.</p>\n<p>Returns a new strings consisting of the given byte values.</p>"},{"title":"module:core#clock","link":"<a href=\"module-core.html#clock\">clock</a>","description":"<p>Reads the current second and microsecond value of the system clock.</p>\n<p>By default, the realtime clock is queried which might skew forwards or\nbackwards due to NTP changes, system sleep modes etc. If a truish value is\npassed as argument, the monotonic system clock is queried instead, which will\nreturn the monotonically increasing time since some arbitrary point in the\npast (usually the system boot time).</p>\n<p>Returns a two element array containing the full seconds as the first element\nand the nanosecond fraction as the second element.</p>\n<p>Returns <code>null</code> if a monotonic clock value is requested and the system does\nnot implement this clock type.</p>"},{"title":"module:core#die","link":"<a href=\"module-core.html#die\">die</a>","description":"<p>Raise an exception with the given message and abort execution.</p>"},{"title":"module:core#exists","link":"<a href=\"module-core.html#exists\">exists</a>","description":"<p>Check whether the given key exists within the given object value.</p>\n<p>Returns <code>true</code> if the given key is present within the object passed as the\nfirst argument, otherwise <code>false</code>.</p>"},{"title":"module:core#exit","link":"<a href=\"module-core.html#exit\">exit</a>","description":"<p>Terminate the interpreter with the given exit code.</p>\n<p>This function does not return.</p>"},{"title":"module:core#filter","link":"<a href=\"module-core.html#filter\">filter</a>","description":"<p>Filter the array passed as the first argument by invoking the function\nspecified in the second argument for each array item.</p>\n<p>If the invoked function returns a truthy result, the item is retained,\notherwise, it is dropped. The filter function is invoked with three\narguments:</p>\n<ol>\n<li>The array value</li>\n<li>The current index</li>\n<li>The array being filtered</li>\n</ol>\n<p>Returns a new array containing only retainted items, in the same order as\nthe input array.</p>"},{"title":"module:core#gc","link":"<a href=\"module-core.html#gc\">gc</a>","description":"<p>Interacts with the mark and sweep garbage collector of the running ucode\nvirtual machine.</p>\n<p>Depending on the given <code>operation</code> string argument, the meaning of <code>argument</code>\nand the function return value differs.</p>\n<p>The following operations are defined:</p>\n<ul>\n<li><code>collect</code> - Perform a complete garbage collection cycle, returns <code>true</code>.</li>\n<li><code>start</code> - (Re-)start periodic garbage collection, <code>argument</code> is an optional\ninteger in the range <code>1..65535</code> specifying the interval.\nDefaults to <code>1000</code> if omitted. Returns <code>true</code> if the periodic GC\nwas previously stopped and is now started or if the interval\nchanged. Returns <code>false</code> otherwise.</li>\n<li><code>stop</code> - Stop periodic garbage collection. Returns <code>true</code> if the periodic\nGC was previously started and is now stopped, <code>false</code> otherwise.</li>\n<li><code>count</code> - Count the amount of active complex object references in the VM\ncontext, returns the counted amount.</li>\n</ul>\n<p>If the <code>operation</code> argument is omitted, the default is <code>collect</code>.</p>"},{"title":"module:core#getenv","link":"<a href=\"module-core.html#getenv\">getenv</a>","description":"<p>Query an environment variable or then entire environment.</p>\n<p>Returns the value of the given environment variable, or - if omitted - a\ndictionary containing all environment variables.</p>"},{"title":"module:core#gmtime","link":"<a href=\"module-core.html#gmtime\">gmtime</a>","description":"<p>Like <code>localtime()</code> but interpreting the given epoch value as UTC time.</p>\n<p>See <code>localtime()</code> for details on the return value.</p>"},{"title":"module:core#hex","link":"<a href=\"module-core.html#hex\">hex</a>","description":"<p>Converts the given hexadecimal string into a number.</p>\n<p>Returns the resulting integer value or <code>NaN</code> if the input value cannot be\ninterpreted as hexadecimal number.</p>"},{"title":"module:core#hexdec","link":"<a href=\"module-core.html#hexdec\">hexdec</a>","description":"<p>Decodes the given hexadecimal digit string into a byte string, optionally\nskipping specified characters.</p>\n<p>If the characters to skip are not specified, a default of <code>&quot; \\t\\n&quot;</code> is used.</p>\n<p>Returns null if the input string contains invalid characters or an uneven\namount of hex digits.</p>\n<p>Returns the decoded byte string on success.</p>"},{"title":"module:core#hexenc","link":"<a href=\"module-core.html#hexenc\">hexenc</a>","description":"<p>Encodes the given byte string into a hexadecimal digit string, converting\nthe input value to a string if needed.</p>"},{"title":"module:core#include","link":"<a href=\"module-core.html#include\">include</a>","description":"<p>Evaluate and include the file at the given path and optionally override the\nexecution scope with the given scope object.</p>\n<p>By default, the file is executed within the same scope as the calling\n<code>include()</code>, but by passing an object as the second argument, it is possible\nto extend the scope available to the included file.</p>\n<p>This is useful to supply additional properties as global variables to the\nincluded code. To sandbox included code, that is giving it only access to\nexplicitly provided properties, the <code>proto()</code> function can be used to create\na scope object with an empty prototype.</p>"},{"title":"module:core#index","link":"<a href=\"module-core.html#index\">index</a>","description":"<p>Finds the given value passed as the second argument within the array or\nstring specified in the first argument.</p>\n<p>Returns the first matching array index or first matching string offset or\n<code>-1</code> if the value was not found.</p>\n<p>Returns <code>null</code> if the first argument was neither an array nor a string.</p>"},{"title":"module:core#int","link":"<a href=\"module-core.html#int\">int</a>","description":"<p>Converts the given value to an integer.</p>\n<p>Returns <code>NaN</code> if the value is not convertible.</p>"},{"title":"module:core#iptoarr","link":"<a href=\"module-core.html#iptoarr\">iptoarr</a>","description":"<p>Convert the given IP address string to an array of byte values.</p>\n<p>IPv4 addresses result in arrays of 4 integers while IPv6 ones in arrays\ncontaining 16 intergers. The resulting array can be turned back into IP\naddress strings using the inverse <code>arrtoip()</code> function.</p>\n<p>Returns an array containing the address byte values.\nReturns <code>null</code> if the given argument is not a string or an invalid IP.</p>"},{"title":"module:core#join","link":"<a href=\"module-core.html#join\">join</a>","description":"<p>Joins the array passed as the second argument into a string, using the\nseparator passed in the first argument as glue.</p>\n<p>Returns <code>null</code> if the second argument is not an array.</p>"},{"title":"module:core#json","link":"<a href=\"module-core.html#json\">json</a>","description":"<p>Parse the given string or resource as JSON and return the resulting value.</p>\n<p>If the input argument is a plain string, it is directly parsed as JSON.</p>\n<p>If an array, object or resource value is given, this function will attempt to\ninvoke a <code>read()</code> method on it to read chunks of input text to incrementally\nparse as JSON data. Reading will stop if the object's <code>read()</code> method returns\neither <code>null</code> or an empty string.</p>\n<p>Throws an exception on parse errors, trailing garbage, or premature EOF.</p>\n<p>Returns the parsed JSON data.</p>"},{"title":"module:core#keys","link":"<a href=\"module-core.html#keys\">keys</a>","description":"<p>Enumerates all object key names.</p>\n<p>Returns an array of all key names present in the passed object.\nReturns <code>null</code> if the given argument is not an object.</p>"},{"title":"module:core#lc","link":"<a href=\"module-core.html#lc\">lc</a>","description":"<p>Convert the given string to lowercase and return the resulting string.</p>\n<p>Returns <code>null</code> if the given argument could not be converted to a string.</p>"},{"title":"module:core#length","link":"<a href=\"module-core.html#length\">length</a>","description":"<p>Determine the length of the given object, array or string.</p>\n<p>Returns the length of the given value.</p>\n<ul>\n<li>For strings, the length is the amount of bytes within the string</li>\n<li>For arrays, the length is the amount of array elements</li>\n<li>For objects, the length is defined as the amount of keys</li>\n</ul>\n<p>Returns <code>null</code> if the given argument is not an object, array or string.</p>"},{"title":"module:core#loadfile","link":"<a href=\"module-core.html#loadfile\">loadfile</a>","description":"<p>Compiles the given file into a ucode program and returns the resulting\nprogram entry function.</p>\n<p>See <code>loadstring()</code> for details.</p>\n<p>Returns the compiled program entry function.</p>\n<p>Throws an exception on compilation or file I/O errors.</p>"},{"title":"module:core#loadstring","link":"<a href=\"module-core.html#loadstring\">loadstring</a>","description":"<p>Compiles the given code string into a ucode program and returns the resulting\nprogram entry function.</p>\n<p>The optional <code>options</code> dictionary overrides parse and compile options.</p>\n<ul>\n<li>If a non-string <code>code</code> argument is given, it is implicitly converted to a\nstring value first.</li>\n<li>If <code>options</code> is omitted or a non-object value, the compile options of the\nrunning ucode program are reused.</li>\n</ul>\n<p>The following keys in the <code>options</code> dictionary are recognized:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lstrip_blocks</code></td>\n<td>bool</td>\n<td>Strip leading whitespace before statement template blocks</td>\n</tr>\n<tr>\n<td><code>trim_blocks</code></td>\n<td>bool</td>\n<td>Strip newline after statement template blocks</td>\n</tr>\n<tr>\n<td><code>strict_declarations</code></td>\n<td>bool</td>\n<td>Treat access to undefined variables as fatal error</td>\n</tr>\n<tr>\n<td><code>raw_mode</code></td>\n<td>bool</td>\n<td>Compile source in script mode, don't treat it as template</td>\n</tr>\n<tr>\n<td><code>module_search_path</code></td>\n<td>array</td>\n<td>Override compile time module search path</td>\n</tr>\n<tr>\n<td><code>force_dynlink_list</code></td>\n<td>array</td>\n<td>List of module names to treat as dynamic extensions</td>\n</tr>\n</tbody>\n</table>\n<p>Unrecognized keys are ignored, unspecified options default to those of the\nrunning program.</p>\n<p>Returns the compiled program entry function.</p>\n<p>Throws an exception on compilation errors.</p>"},{"title":"module:core#localtime","link":"<a href=\"module-core.html#localtime\">localtime</a>","description":"<p>Return the given epoch timestamp (or now, if omitted) as a dictionary\ncontaining broken-down date and time information according to the local\nsystem timezone.</p>\n<p>The resulting dictionary contains the following fields:</p>\n<ul>\n<li><code>sec</code>    Seconds (0-60)</li>\n<li><code>min</code>    Minutes (0-59)</li>\n<li><code>hour</code>   Hours (0-23)</li>\n<li><code>mday</code>   Day of month (1-31)</li>\n<li><code>mon</code>    Month (1-12)</li>\n<li><code>year</code>   Year (&gt;= 1900)</li>\n<li><code>wday</code>   Day of the week (1-7, Sunday = 7)</li>\n<li><code>yday</code>   Day of the year (1-366, Jan 1st = 1)</li>\n<li><code>isdst</code>  Daylight saving time in effect (yes = 1)</li>\n</ul>\n<p>Note that in contrast to the underlying <code>localtime(3)</code> C library function,\nthe values for <code>mon</code>, <code>wday</code>, and <code>yday</code> are 1-based, and the <code>year</code> is\n1900-based.</p>"},{"title":"module:core#ltrim","link":"<a href=\"module-core.html#ltrim\">ltrim</a>","description":"<p>Trim any of the specified characters from the start of the string.\nIf the second argument is omitted, trims the characters <code> </code> (space), '\\t',\n'\\r', and '\\n'.</p>\n<p>Returns the left trimmed string.</p>"},{"title":"module:core#map","link":"<a href=\"module-core.html#map\">map</a>","description":"<p>Transform the array passed as the first argument by invoking the function\nspecified in the second argument for each array item.</p>\n<p>Returns a new array of the same length as the input array containing the\ntransformed values.</p>"},{"title":"module:core#match","link":"<a href=\"module-core.html#match\">match</a>","description":"<p>Match the given string against the regular expression pattern specified as\nthe second argument.</p>\n<p>If the passed regular expression uses the <code>g</code> flag, the return value will be\nan array of arrays describing all found occurrences within the string.</p>\n<p>Without the <code>g</code> modifier, an array describing the first match is returned.</p>\n<p>Returns <code>null</code> if the pattern was not found within the given string.</p>"},{"title":"module:core#max","link":"<a href=\"module-core.html#max\">max</a>","description":"<p>Return the largest value among all parameters passed to the function.</p>"},{"title":"module:core#min","link":"<a href=\"module-core.html#min\">min</a>","description":"<p>Return the smallest value among all parameters passed to the function.</p>"},{"title":"module:core#ord","link":"<a href=\"module-core.html#ord\">ord</a>","description":"<p>Without further arguments, this function returns the byte value of the first\ncharacter in the given string.</p>\n<p>If an offset argument is supplied, the byte value of the character at this\nposition is returned. If an invalid index is supplied, the function will\nreturn <code>null</code>. Negative index entries are counted towards the end of the\nstring, e.g. <code>-2</code> will return the value of the second last character.</p>\n<p>Returns the byte value of the character.\nReturns <code>null</code> if the offset is invalid or if the input is not a string.</p>"},{"title":"module:core#pop","link":"<a href=\"module-core.html#pop\">pop</a>","description":"<p>Pops the first item from the given array and returns it.</p>\n<p>Returns <code>null</code> if the array was empty or if a non-array argument was passed.</p>"},{"title":"module:core#print","link":"<a href=\"module-core.html#print\">print</a>","description":"<p>Print any of the given values to stdout.</p>\n<p>The <code>print()</code> function writes a string representation of each given argument\nto stdout and returns the amount of bytes written.</p>\n<p>String values are printed as-is, integer and double values are printed in\ndecimal notation, boolean values are printed as <code>true</code> or <code>false</code> while\narrays and objects are converted to their JSON representation before being\nwritten to the standard output. The <code>null</code> value is represented by an empty\nstring so <code>print(null)</code> would print nothing. Resource values are printed in\nthe form <code>&lt;type address&gt;</code>, e.g. <code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>Examples:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>print(1 != 2);                       // Will print 'true'\nprint(0xff);                         // Will print '255'\nprint(2e3);                          // Will print '2000'\nprint(null);                         // Will print nothing\nprint({ hello: true, world: 123 });  // Will print '{ &quot;hello&quot;: true, &quot;world&quot;: 123 }'\nprint([1,2,3]);                      // Will print '[ 1, 2, 3 ]'\n\nprint(proto({ foo: &quot;bar&quot; },          // Will print 'MyObj'\n  { tostring: () => &quot;MyObj&quot; }));     // instead of '{ &quot;foo&quot;: &quot;bar&quot; }'\n\n</code></pre>\n<p>Returns the amount of bytes printed.</p>"},{"title":"module:core#printf","link":"<a href=\"module-core.html#printf\">printf</a>","description":"<p>Formats the given arguments according to the given format string and outputs\nthe result to stdout.</p>\n<p>Ucode supports a restricted subset of the formats allowed by the underlying\nlibc's <code>printf()</code> implementation, namely it allows the <code>d</code>, <code>i</code>, <code>o</code>, <code>u</code>,\n<code>x</code>, <code>X</code>, <code>e</code>, <code>E</code>, <code>f</code>, <code>F</code>, <code>g</code>, <code>G</code>, <code>c</code> and <code>s</code> conversions.</p>\n<p>Additionally, an ucode specific <code>J</code> format is implemented, which causes the\ncorresponding value to be formatted as JSON string. By prefixing the <code>J</code>\nformat letter with a precision specifier, the resulting JSON output will be\npretty printed. A precision of <code>0</code> will use tabs for indentation, any other\npositive precision will use that many spaces for indentation while a negative\nor omitted precision specifier will turn off pretty printing.</p>\n<p>Other format specifiers such as <code>n</code> or <code>z</code> are not accepted and returned\nverbatim. Format specifiers including <code>*</code> directives are rejected as well.</p>\n<p>Returns the number of bytes written to the standard output.</p>"},{"title":"module:core#proto","link":"<a href=\"module-core.html#proto\">proto</a>","description":"<p>Get or set the prototype of the array or object value <code>val</code>.</p>\n<p>When invoked without a second argument, the function returns the current\nprototype of the value in <code>val</code> or <code>null</code> if there is no prototype or if the\ngiven value is neither an object nor an array.</p>\n<p>When invoked with a second prototype argument, the given <code>proto</code> value is set\nas the prototype on the array or object in <code>val</code>.</p>\n<p>Throws an exception if the given prototype value is not an object.</p>"},{"title":"module:core#push","link":"<a href=\"module-core.html#push\">push</a>","description":"<p>Pushes the given argument(s) to the given array.</p>\n<p>Returns the last pushed value.</p>"},{"title":"module:core#regexp","link":"<a href=\"module-core.html#regexp\">regexp</a>","description":"<p>Construct a regular expression instance from the given <code>source</code> pattern\nstring and any flags optionally specified by the <code>flags</code> argument.</p>\n<ul>\n<li>Throws a type error exception if <code>flags</code> is not a string or if the string\nin <code>flags</code> contains unrecognized regular expression flag characters.</li>\n<li>Throws a syntax error when the pattern in <code>source</code> cannot be compiled into\na valid regular expression.</li>\n</ul>\n<p>Returns the compiled regular expression value.</p>"},{"title":"module:core#render","link":"<a href=\"module-core.html#render\">render</a>","description":"<p>When invoked with a string value as the first argument, the function acts\nlike <code>include()</code> but captures the output of the included file as a string and\nreturns the captured contents.</p>\n<p>The second argument is treated as the scope.</p>\n<p>When invoked with a function value as the first argument, <code>render()</code> calls\nthe given function and passes all subsequent arguments to it.</p>\n<p>Any output produced by the called function is captured and returned as a\nstring. The return value of the called function is discarded.</p>"},{"title":"module:core#replace","link":"<a href=\"module-core.html#replace\">replace</a>","description":"<p>Replace occurrences of the specified pattern in the string passed as the\nfirst argument.</p>\n<ul>\n<li>The pattern value may be either a regular expression or a plain string.</li>\n<li>The replace value may be a function which is invoked for each found pattern\nor any other value which is converted into a plain string and used as\nreplacement.</li>\n<li>When an optional limit is specified, substitutions are performed only that\nmany times.</li>\n<li>If the pattern is a regular expression and not using the <code>g</code> flag, then\nonly the first occurrence in the string is replaced.</li>\n<li>If the <code>g</code> flag is used or if the pattern is not a regular expression, all\noccurrences are replaced.</li>\n<li>If the replace value is a callback function, it is invoked with the found\nsubstring as the first and any capture group values as subsequent\nparameters.</li>\n<li>If the replace value is a string, specific substrings are substituted\nbefore it is inserted into the result.</li>\n</ul>\n<p>Returns a new string with the pattern replaced.</p>"},{"title":"module:core#reverse","link":"<a href=\"module-core.html#reverse\">reverse</a>","description":"<p>Reverse the order of the given input array or string.</p>\n<p>If an array is passed, returns the array in reverse order.\nIf a string is passed, returns the string with the sequence of the characters\nreversed.</p>\n<p>Returns the reversed array or string.\nReturns <code>null</code> if neither an array nor a string were passed.</p>"},{"title":"module:core#rindex","link":"<a href=\"module-core.html#rindex\">rindex</a>","description":"<p>Finds the given value passed as the second argument within the array or\nstring specified in the first argument.</p>\n<p>Returns the last matching array index or last matching string offset or\n<code>-1</code> if the value was not found.</p>\n<p>Returns <code>null</code> if the first argument was neither an array nor a string.</p>"},{"title":"module:core#rtrim","link":"<a href=\"module-core.html#rtrim\">rtrim</a>","description":"<p>Trim any of the specified characters from the end of the string.\nIf the second argument is omitted, trims the characters <code> </code> (space), '\\t',\n'\\r', and '\\n'.</p>\n<p>Returns the right trimmed string.</p>"},{"title":"module:core#shift","link":"<a href=\"module-core.html#shift\">shift</a>","description":"<p>Pops the first item from the given array and returns it.</p>\n<p>Returns <code>null</code> if the array was empty or if a non-array argument was passed.</p>"},{"title":"module:core#signal","link":"<a href=\"module-core.html#signal\">signal</a>","description":"<p>Set or query process signal handler function.</p>\n<p>When invoked with two arguments, a signal specification and a signal handler\nvalue, this function configures a new process signal handler.</p>\n<p>When invoked with one argument, a signal specification, this function returns\nthe currently configured handler for the given signal.</p>\n<p>The signal specification might either be an integer signal number or a string\nvalue containing a signal name (with or without &quot;SIG&quot; prefix). Signal names\nare treated case-insensitively.</p>\n<p>The signal handler might be either a callable function value or one of the\ntwo special string values <code>&quot;ignore&quot;</code> and <code>&quot;default&quot;</code>. Passing <code>&quot;ignore&quot;</code> will\nmask the given process signal while <code>&quot;default&quot;</code> will restore the operating\nsystems default behaviour for the given signal.</p>\n<p>In case a callable handler function is provided, it is invoked at the\nearliest  opportunity after receiving the corresponding signal from the\noperating system. The invoked function will receive a single argument, the\nnumber of the signal it is invoked for.</p>\n<p>Note that within the ucode VM, process signals are not immediately delivered,\ninstead the VM keeps track of received signals and delivers them to the ucode\nscript environment at the next opportunity, usually before executing the next\nbyte code instruction. This means that if a signal is received while\nperforming a computationally expensive operation in C mode, such as a complex\nregexp match, the corresponding ucode signal handler will only be invoked\nafter that operation concluded and control flow returns to the VM.</p>\n<p>Returns the signal handler function or one of the special values <code>&quot;ignore&quot;</code>\nor <code>&quot;default&quot;</code> corresponding to the given signal specification.</p>\n<p>Returns <code>null</code> if an invalid signal spec or signal handler was provided.</p>\n<p>Returns <code>null</code> if changing the signal action failed, e.g. due to insufficient\npermission, or when attempting to ignore a non-ignorable signal.</p>"},{"title":"module:core#sleep","link":"<a href=\"module-core.html#sleep\">sleep</a>","description":"<p>Pause execution for the given amount of milliseconds.</p>"},{"title":"module:core#slice","link":"<a href=\"module-core.html#slice\">slice</a>","description":"<p>Performs a shallow copy of a portion of the source array, as specified by\nthe start and end offsets. The original array is not modified.</p>\n<p>Returns a new array containing the copied elements, if any.\nReturns <code>null</code> if the given source argument is not an array value.</p>"},{"title":"module:core#sort","link":"<a href=\"module-core.html#sort\">sort</a>","description":"<p>Sort the given array according to the given sort function.\nIf no sort function is provided, a default ascending sort order is applied.</p>\n<p>The input array is sorted in-place, no copy is made.</p>\n<p>The custom sort function is repeatedly called until the entire array is\nsorted. It will receive two values as arguments and should return a value\nlower than, larger than or equal to zero depending on whether the first\nargument is smaller, larger or equal to the second argument respectively.</p>\n<p>Returns the sorted input array.</p>"},{"title":"module:core#sourcepath","link":"<a href=\"module-core.html#sourcepath\">sourcepath</a>","description":"<p>Determine the path of the source file currently being executed by ucode.</p>"},{"title":"module:core#splice","link":"<a href=\"module-core.html#splice\">splice</a>","description":"<p>Removes the elements designated by <code>off</code> and <code>len</code> from the given array,\nand replaces them with the additional arguments passed, if any.</p>\n<p>The array grows or shrinks as necessary.</p>\n<p>Returns the last element removed, or <code>null</code> if no elements are removed.</p>"},{"title":"module:core#split","link":"<a href=\"module-core.html#split\">split</a>","description":"<p>Split the given string using the separator passed as the second argument\nand return an array containing the resulting pieces.</p>\n<p>If a limit argument is supplied, the resulting array contains no more than\nthe given amount of entries, that means the string is split at most\n<code>limit - 1</code> times total.</p>\n<p>The separator may either be a plain string or a regular expression.</p>\n<p>Returns a new array containing the resulting pieces.</p>"},{"title":"module:core#sprintf","link":"<a href=\"module-core.html#sprintf\">sprintf</a>","description":"<p>Formats the given arguments according to the given format string.</p>\n<p>See <code>printf()</code> for details.</p>\n<p>Returns the formatted string.</p>"},{"title":"module:core#substr","link":"<a href=\"module-core.html#substr\">substr</a>","description":"<p>Extracts a substring out of <code>str</code> and returns it. First character is at\noffset zero.</p>\n<ul>\n<li>If <code>off</code> is negative, starts that far back from the end of the string.</li>\n<li>If <code>len</code> is omitted, returns everything through the end of the string.</li>\n<li>If <code>len</code> is negative, leaves that many characters off the string end.</li>\n</ul>\n<p>Returns the extracted substring.</p>"},{"title":"module:core#system","link":"<a href=\"module-core.html#system\">system</a>","description":"<p>Executes the given command, waits for completion, and returns the resulting\nexit code.</p>\n<p>The command argument may be either a string, in which case it is passed to\n<code>/bin/sh -c</code>, or an array, which is directly converted into an <code>execv()</code>\nargument vector.</p>\n<ul>\n<li>If the program terminated normally, a positive integer holding the\nprogram's <code>exit()</code> code is returned.</li>\n<li>If the program was terminated by an uncaught signal, a negative signal\nnumber is returned.</li>\n<li>If the optional timeout argument is specified, the program is terminated\nby <code>SIGKILL</code> after that many milliseconds if it doesn't complete within\nthe timeout.</li>\n</ul>\n<p>Omitting the timeout argument or passing <code>0</code> disables the command timeout.</p>\n<p>Returns the program exit code.</p>"},{"title":"module:core#time","link":"<a href=\"module-core.html#time\">time</a>","description":"<p>Returns the current UNIX epoch.</p>"},{"title":"module:core#timegm","link":"<a href=\"module-core.html#timegm\">timegm</a>","description":"<p>Like <code>timelocal()</code> but interpreting the given date time specification as UTC\ntime.</p>\n<p>See <code>timelocal()</code> for details.</p>"},{"title":"module:core#timelocal","link":"<a href=\"module-core.html#timelocal\">timelocal</a>","description":"<p>Performs the inverse operation of <code>localtime()</code> by taking a broken-down date\nand time dictionary and transforming it into an epoch value according to the\nlocal system timezone.</p>\n<p>The <code>wday</code> and <code>yday</code> fields of the given date time specification are\nignored. Field values outside of their valid range are internally normalized,\ne.g. October 40th is interpreted as November 9th.</p>\n<p>Returns the resulting epoch value or null if the input date time dictionary\nwas invalid or if the date time specification cannot be represented as epoch\nvalue.</p>"},{"title":"module:core#trace","link":"<a href=\"module-core.html#trace\">trace</a>","description":"<p>Enables or disables VM opcode tracing.</p>\n<p>When invoked with a positive non-zero level, opcode tracing is enabled and\ndebug information is printed to stderr as the program is executed.</p>\n<p>Invoking <code>trace()</code> with zero as an argument turns off opcode tracing.</p>"},{"title":"module:core#trim","link":"<a href=\"module-core.html#trim\">trim</a>","description":"<p>Trim any of the specified characters in <code>c</code> from the start and end of <code>str</code>.\nIf the second argument is omitted, trims the characters, <code> </code> (space), <code>\\t</code>,\n<code>\\r</code>, and <code>\\n</code>.</p>\n<p>Returns the trimmed string.</p>"},{"title":"module:core#type","link":"<a href=\"module-core.html#type\">type</a>","description":"<p>Query the type of the given value.</p>\n<p>Returns the type of the given value as a string which might be one of\n<code>&quot;function&quot;</code>, <code>&quot;object&quot;</code>, <code>&quot;array&quot;</code>, <code>&quot;double&quot;</code>, <code>&quot;int&quot;</code>, or <code>&quot;bool&quot;</code>.</p>\n<p>Returns <code>null</code> when no value or <code>null</code> is passed.</p>"},{"title":"module:core#uc","link":"<a href=\"module-core.html#uc\">uc</a>","description":"<p>Converts the given string to uppercase and returns the resulting string.</p>\n<p>Returns null if the given argument could not be converted to a string.</p>"},{"title":"module:core#uchr","link":"<a href=\"module-core.html#uchr\">uchr</a>","description":"<p>Converts each given numeric value to an UTF-8 multibyte sequence and returns\nthe resulting string.</p>\n<p>Invalid numeric values or values outside the range <code>0</code>..<code>0x10FFFF</code> are\nrepresented by the unicode replacement character <code>0xFFFD</code>.</p>\n<p>Returns a new UTF-8 encoded string consisting of unicode characters\ncorresponding to the given numeric codepoints.</p>"},{"title":"module:core#uniq","link":"<a href=\"module-core.html#uniq\">uniq</a>","description":"<p>Returns a new array containing all unique values of the given input array.</p>\n<ul>\n<li>The order is preserved, and subsequent duplicate values are skipped.</li>\n<li>If a non-array argument is given, the function returns <code>null</code>.</li>\n</ul>"},{"title":"module:core#unshift","link":"<a href=\"module-core.html#unshift\">unshift</a>","description":"<p>Add the given values to the beginning of the array passed via first argument.</p>\n<p>Returns the last value added to the array.</p>"},{"title":"module:core#values","link":"<a href=\"module-core.html#values\">values</a>","description":"<p>Returns an array containing all values of the given object.</p>\n<p>Returns null if no object was passed.</p>"},{"title":"module:core#warn","link":"<a href=\"module-core.html#warn\">warn</a>","description":"<p>Print any of the given values to stderr. Arrays and objects are converted to\ntheir JSON representation.</p>\n<p>Returns the amount of bytes printed.</p>"},{"title":"module:core#wildcard","link":"<a href=\"module-core.html#wildcard\">wildcard</a>","description":"<p>Match the given subject against the supplied wildcard (file glob) pattern.</p>\n<ul>\n<li>If a truthy value is supplied as the third argument, case-insensitive\nmatching is performed.</li>\n<li>If a non-string value is supplied as the subject, it is converted into a\nstring before being matched.</li>\n</ul>\n<p>Returns <code>true</code> when the value matched the given pattern, otherwise <code>false</code>.</p>"},{"title":"module:debug","link":"<a href=\"module-debug.html\">debug</a>","description":"<h1 id=\"debugger-module\">Debugger Module</h1>\n<p>This module provides runtime debug functionality for ucode scripts.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { memdump, traceback } from 'debug';\n\nlet stacktrace = traceback(1);\n\nmemdump(&quot;/tmp/dump.txt&quot;);\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as debug from 'debug';\n\nlet stacktrace = debug.traceback(1);\n\ndebug.memdump(&quot;/tmp/dump.txt&quot;);\n</code></pre>\n<p>Additionally, the debug module namespace may also be imported by invoking the\n<code>ucode</code> interpreter with the <code>-ldebug</code> switch.</p>\n<p>Upon loading, the <code>debug</code> module will register a <code>SIGUSR2</code> signal handler\nwhich, upon receipt of the signal, will write a memory dump of the currently\nrunning program to <code>/tmp/ucode.$timestamp.$pid.memdump</code>. This default\nbehavior can be inhibited by setting the <code>UCODE_DEBUG_MEMDUMP_ENABLED</code>\nenvironment variable to <code>0</code> when starting the process. The memory dump signal\nand output directory can be overridden with the <code>UCODE_DEBUG_MEMDUMP_SIGNAL</code>\nand <code>UCODE_DEBUG_MEMDUMP_PATH</code> environment variables respectively.</p>"},{"title":"module:debug#getinfo","link":"<a href=\"module-debug.html#getinfo\">getinfo</a>","description":"<p>Obtain information about the given value.</p>\n<p>The <code>getinfo()</code> function allows querying internal information about the\ngiven ucode value, such as the current reference count, the mark bit state\netc.</p>\n<p>Returns a dictionary with value type specific details.</p>\n<p>Returns <code>null</code> if a <code>null</code> value was provided.</p>"},{"title":"module:debug#getlocal","link":"<a href=\"module-debug.html#getlocal\">getlocal</a>","description":"<p>Obtain local variable.</p>\n<p>The <code>getlocal()</code> function retrieves information about the specified local\nvariable at the given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up local variables should\nbe queried. A value of <code>0</code> refers to this <code>getlocal()</code> function call itself,\n<code>1</code> to the function calling <code>getlocal()</code> and so on.</p>\n<p>The variable to query might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the given variable.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is a C call.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#getupval","link":"<a href=\"module-debug.html#getupval\">getupval</a>","description":"<p>Obtain captured variable (upvalue).</p>\n<p>The <code>getupval()</code> function retrieves information about the specified captured\nvariable associated with the given function value or the invoked function at\nthe given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up the function should be\nselected to query associated captured variables for. A value of <code>0</code> refers to\nthis <code>getupval()</code> function call itself, <code>1</code> to the function calling\n<code>getupval()</code> and so on.</p>\n<p>The variable to query might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the given variable.</p>\n<p>Returns <code>null</code> if the given function value is not a closure.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is not a closure.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#memdump","link":"<a href=\"module-debug.html#memdump\">memdump</a>","description":"<p>Write a memory dump report to the given file.</p>\n<p>This function generates a human readable memory dump of ucode values\ncurrently managed by the running VM which is useful to track down logical\nmemory leaks in scripts.</p>\n<p>The file parameter can be either a string value containing a file path, in\nwhich case this function tries to create and write the report file at the\ngiven location, or an already open file handle this function should write to.</p>\n<p>Returns <code>true</code> if the report has been written.</p>\n<p>Returns <code>null</code> if the file could not be opened or if the handle was invalid.</p>"},{"title":"module:debug#setlocal","link":"<a href=\"module-debug.html#setlocal\">setlocal</a>","description":"<p>Set local variable.</p>\n<p>The <code>setlocal()</code> function manipulates the value of the specified local\nvariable at the given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up local variables should\nbe updated. A value of <code>0</code> refers to this <code>setlocal()</code> function call itself,\n<code>1</code> to the function calling <code>setlocal()</code> and so on.</p>\n<p>The variable to update might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the updated variable.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is a C call.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#setupval","link":"<a href=\"module-debug.html#setupval\">setupval</a>","description":"<p>Set upvalue.</p>\n<p>The <code>setupval()</code> function manipulates the value of the specified captured\nvariable associated with the given function value or the invoked function at\nthe given call stack depth.</p>\n<p>The call stack depth specifies the amount of levels up the function should be\nselected to update associated captured variables for. A value of <code>0</code> refers\nto this <code>setupval()</code> function call itself, <code>1</code> to the function calling\n<code>setupval()</code> and so on.</p>\n<p>The variable to update might be either specified by name or by its index with\nindex numbers following the source code declaration order.</p>\n<p>Returns a dictionary holding information about the updated variable.</p>\n<p>Returns <code>null</code> if the given function value is not a closure.</p>\n<p>Returns <code>null</code> if the stack depth exceeds the size of the current call stack.</p>\n<p>Returns <code>null</code> if the invocation at the given stack depth is not a closure.</p>\n<p>Returns <code>null</code> if the given variable name is not found or the given variable\nindex is invalid.</p>"},{"title":"module:debug#sourcepos","link":"<a href=\"module-debug.html#sourcepos\">sourcepos</a>","description":"<p>Obtain information about the current source position.</p>\n<p>The <code>sourcepos()</code> function determines the source code position of the\ncurrent instruction invoking this function.</p>\n<p>Returns a dictionary containing the filename, line number and line byte\noffset of the call site.</p>\n<p>Returns <code>null</code> if this function was invoked from C code.</p>"},{"title":"module:debug#traceback","link":"<a href=\"module-debug.html#traceback\">traceback</a>","description":"<p>Capture call stack trace.</p>\n<p>This function captures the current call stack and returns it. The optional\nlevel parameter controls how many calls up the trace should start. It\ndefaults to <code>1</code>, that is the function calling this <code>traceback()</code> function.</p>\n<p>Returns an array of stack trace entries describing the function invocations\nup to the point where <code>traceback()</code> is called.</p>"},{"title":"module:debug.LocalInfo","link":"<a href=\"module-debug.html#.LocalInfo\">LocalInfo</a>"},{"title":"module:debug.SourcePosition","link":"<a href=\"module-debug.html#.SourcePosition\">SourcePosition</a>"},{"title":"module:debug.StackTraceEntry","link":"<a href=\"module-debug.html#.StackTraceEntry\">StackTraceEntry</a>"},{"title":"module:debug.UpvalInfo","link":"<a href=\"module-debug.html#.UpvalInfo\">UpvalInfo</a>"},{"title":"module:debug.UpvalRef","link":"<a href=\"module-debug.html#.UpvalRef\">UpvalRef</a>"},{"title":"module:debug.ValueInformation","link":"<a href=\"module-debug.html#.ValueInformation\">ValueInformation</a>"},{"title":"module:fs","link":"<a href=\"module-fs.html\">fs</a>","description":"<h1 id=\"filesystem-access\">Filesystem Access</h1>\n<p>The <code>fs</code> module provides functions for interacting with the file system.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { readlink, popen } from 'fs';\n\nlet dest = readlink('/sys/class/net/eth0');\nlet proc = popen('ps ww');\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as fs from 'fs';\n\nlet dest = fs.readlink('/sys/class/net/eth0');\nlet proc = fs.popen('ps ww');\n</code></pre>\n<p>Additionally, the filesystem module namespace may also be imported by invoking\nthe <code>ucode</code> interpreter with the <code>-lfs</code> switch.</p>"},{"title":"module:fs#access","link":"<a href=\"module-fs.html#access\">access</a>","description":"<p>Checks the accessibility of a file or directory.</p>\n<p>The optional modes argument specifies the access modes which should be\nchecked. A file is only considered accessible if all access modes specified\nin the modes argument are possible.</p>\n<p>The following modes are recognized:</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;r&quot;</td>\n<td>Tests whether the file is readable.</td>\n</tr>\n<tr>\n<td>&quot;w&quot;</td>\n<td>Tests whether the file is writable.</td>\n</tr>\n<tr>\n<td>&quot;x&quot;</td>\n<td>Tests whether the file is executable.</td>\n</tr>\n<tr>\n<td>&quot;f&quot;</td>\n<td>Tests whether the file exists.</td>\n</tr>\n</tbody>\n</table>\n<p>Returns <code>true</code> if the given path is accessible or <code>false</code> when it is not.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inaccessible intermediate\npath components, invalid path arguments etc.</p>"},{"title":"module:fs#basename","link":"<a href=\"module-fs.html#basename\">basename</a>","description":"<p>Retrieves the base name of a path.</p>\n<p>Returns the base name component of the specified path.</p>\n<p>Returns <code>null</code> if the path argument is not a string.</p>"},{"title":"module:fs#chdir","link":"<a href=\"module-fs.html#chdir\">chdir</a>","description":"<p>Changes the current working directory to the specified path.</p>\n<p>Returns <code>true</code> if the permission change was successful.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions or\ninvalid arguments.</p>"},{"title":"module:fs#chmod","link":"<a href=\"module-fs.html#chmod\">chmod</a>","description":"<p>Changes the permission mode bits of a file or directory.</p>\n<p>Returns <code>true</code> if the permission change was successful.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions or\ninvalid arguments.</p>"},{"title":"module:fs#chown","link":"<a href=\"module-fs.html#chown\">chown</a>","description":"<p>Changes the owner and group of a file or directory.</p>\n<p>The user and group may be specified either as uid or gid number respectively,\nor as a string containing the user or group name, in which case it is\nresolved to the proper uid/gid first.</p>\n<p>If either the user or group parameter is omitted or given as <code>-1</code>,\nit is not changed.</p>\n<p>Returns <code>true</code> if the ownership change was successful.</p>\n<p>Returns <code>null</code> if an error occurred or if a user/group name cannot be\nresolved to a uid/gid value.</p>"},{"title":"module:fs#dirname","link":"<a href=\"module-fs.html#dirname\">dirname</a>","description":"<p>Retrieves the directory name of a path.</p>\n<p>Returns the directory name component of the specified path.</p>\n<p>Returns <code>null</code> if the path argument is not a string.</p>"},{"title":"module:fs#error","link":"<a href=\"module-fs.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs#fdopen","link":"<a href=\"module-fs.html#fdopen\">fdopen</a>","description":"<p>Associates a file descriptor number with a file handle object.</p>\n<p>The mode argument controls how the file handle object is opened\nand must match the open mode of the underlying descriptor.</p>\n<p>It may be set to one of the following values:</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;r&quot;</td>\n<td>Opens a file stream for reading. The file descriptor must be valid and opened in read mode.</td>\n</tr>\n<tr>\n<td>&quot;w&quot;</td>\n<td>Opens a file stream for writing. The file descriptor must be valid and opened in write mode.</td>\n</tr>\n<tr>\n<td>&quot;a&quot;</td>\n<td>Opens a file stream for appending. The file descriptor must be valid and opened in write mode.</td>\n</tr>\n<tr>\n<td>&quot;r+&quot;</td>\n<td>Opens a file stream for both reading and writing. The file descriptor must be valid and opened in read/write mode.</td>\n</tr>\n<tr>\n<td>&quot;w+&quot;</td>\n<td>Opens a file stream for both reading and writing. The file descriptor must be valid and opened in read/write mode.</td>\n</tr>\n<tr>\n<td>&quot;a+&quot;</td>\n<td>Opens a file stream for both reading and appending. The file descriptor must be valid and opened in read/write mode.</td>\n</tr>\n</tbody>\n</table>\n<p>Returns the file handle object associated with the file descriptor.</p>"},{"title":"module:fs#getcwd","link":"<a href=\"module-fs.html#getcwd\">getcwd</a>","description":"<p>Retrieves the current working directory.</p>\n<p>Returns a string containing the current working directory path.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#lsdir","link":"<a href=\"module-fs.html#lsdir\">lsdir</a>","description":"<p>Lists the content of a directory.</p>\n<p>Returns a sorted array of the names of files and directories in the specified\ndirectory.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. if the specified directory cannot\nbe opened.</p>"},{"title":"module:fs#lstat","link":"<a href=\"module-fs.html#lstat\">lstat</a>","description":"<p>Retrieves information about a file or directory, without following symbolic\nlinks.</p>\n<p>Returns an object containing information about the file or directory.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#mkdir","link":"<a href=\"module-fs.html#mkdir\">mkdir</a>","description":"<p>Creates a new directory.</p>\n<p>Returns <code>true</code> if the directory was successfully created.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#mkstemp","link":"<a href=\"module-fs.html#mkstemp\">mkstemp</a>","description":"<p>Creates a unique, ephemeral temporary file.</p>\n<p>Creates a new temporary file, opens it in read and write mode, unlinks it and\nreturns a file handle object referring to the yet open but deleted file.</p>\n<p>Upon closing the handle, the associated file will automatically vanish from\nthe system.</p>\n<p>The optional path template argument may be used to override the path and name\nchosen for the temporary file. If the path template contains no path element,\n<code>/tmp/</code> is prepended, if it does not end with <code>XXXXXX</code>, then  * <code>.XXXXXX</code> is\nappended to it. The <code>XXXXXX</code> sequence is replaced with a random value\nensuring uniqueness of the temporary file name.</p>\n<p>Returns a file handle object referring to the ephemeral file on success.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. on insufficient permissions or\ninaccessible directory.</p>"},{"title":"module:fs#open","link":"<a href=\"module-fs.html#open\">open</a>","description":"<p>Opens a file.</p>\n<p>The mode argument specifies the way the file is opened, it may\nstart with one of the following values:</p>\n<table>\n<thead>\n<tr>\n<th>Mode</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;r&quot;</td>\n<td>Opens a file for reading. The file must exist.</td>\n</tr>\n<tr>\n<td>&quot;w&quot;</td>\n<td>Opens a file for writing. If the file exists, it is truncated. If the file does not exist, it is created.</td>\n</tr>\n<tr>\n<td>&quot;a&quot;</td>\n<td>Opens a file for appending. Data is written at the end of the file. If the file does not exist, it is created.</td>\n</tr>\n<tr>\n<td>&quot;r+&quot;</td>\n<td>Opens a file for both reading and writing. The file must exist.</td>\n</tr>\n<tr>\n<td>&quot;w+&quot;</td>\n<td>Opens a file for both reading and writing. If the file exists, it is truncated. If the file does not exist, it is created.</td>\n</tr>\n<tr>\n<td>&quot;a+&quot;</td>\n<td>Opens a file for both reading and appending. Data can be read and written at the end of the file. If the file does not exist, it is created.</td>\n</tr>\n</tbody>\n</table>\n<p>Additionally, the following flag characters may be appended to\nthe mode value:</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;x&quot;</td>\n<td>Opens a file for exclusive creation. If the file exists, the <code>open</code> call fails.</td>\n</tr>\n<tr>\n<td>&quot;e&quot;</td>\n<td>Opens a file with the <code>O_CLOEXEC</code> flag set, ensuring that the file descriptor is closed on <code>exec</code> calls.</td>\n</tr>\n</tbody>\n</table>\n<p>If the mode is one of <code>&quot;w…&quot;</code> or <code>&quot;a…&quot;</code>, the permission argument\ncontrols the filesystem permissions bits used when creating\nthe file.</p>\n<p>Returns a file handle object associated with the opened file.</p>"},{"title":"module:fs#opendir","link":"<a href=\"module-fs.html#opendir\">opendir</a>","description":"<p>Opens a directory and returns a directory handle associated with the open\ndirectory descriptor.</p>\n<p>Returns a director handle referring to the open directory.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#pipe","link":"<a href=\"module-fs.html#pipe\">pipe</a>","description":"<p>Creates a pipe and returns file handle objects associated with the read- and\nwrite end of the pipe respectively.</p>\n<p>Returns a two element array containing both a file handle object open in read\nmode referring to the read end of the pipe and a file handle object open in\nwrite mode referring to the write end of the pipe.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#popen","link":"<a href=\"module-fs.html#popen\">popen</a>","description":"<p>Starts a process and returns a handle representing the executed process.</p>\n<p>The handle will be connected to the process stdin or stdout, depending on the\nvalue of the mode argument.</p>\n<p>The mode argument may be either &quot;r&quot; to open the process for reading (connect\nto its stdin) or &quot;w&quot; to open the process for writing (connect to its stdout).</p>\n<p>The mode character &quot;r&quot; or &quot;w&quot; may be optionally followed by &quot;e&quot; to apply the\nFD_CLOEXEC flag onto the open descriptor.</p>\n<p>Returns a process handle referring to the executed process.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#readfile","link":"<a href=\"module-fs.html#readfile\">readfile</a>","description":"<p>Reads the content of a file, optionally limited to the given amount of bytes.</p>\n<p>Returns a string containing the file contents.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#readlink","link":"<a href=\"module-fs.html#readlink\">readlink</a>","description":"<p>Reads the target path of a symbolic link.</p>\n<p>Returns a string containing the target path.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#realpath","link":"<a href=\"module-fs.html#realpath\">realpath</a>","description":"<p>Resolves the absolute path of a file or directory.</p>\n<p>Returns a string containing the resolved path.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#rename","link":"<a href=\"module-fs.html#rename\">rename</a>","description":"<p>Renames or moves a file or directory.</p>\n<p>Returns <code>true</code> if the rename operation was successful.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs#rmdir","link":"<a href=\"module-fs.html#rmdir\">rmdir</a>","description":"<p>Removes the specified directory.</p>\n<p>Returns <code>true</code> if the directory was successfully removed.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#stat","link":"<a href=\"module-fs.html#stat\">stat</a>","description":"<p>Retrieves information about a file or directory.</p>\n<p>Returns an object containing information about the file or directory.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs#symlink","link":"<a href=\"module-fs.html#symlink\">symlink</a>","description":"<p>Creates a new symbolic link.</p>\n<p>Returns <code>true</code> if the symlink was successfully created.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#unlink","link":"<a href=\"module-fs.html#unlink\">unlink</a>","description":"<p>Removes the specified file or symbolic link.</p>\n<p>Returns <code>true</code> if the unlink operation was successful.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to inexistent path.</p>"},{"title":"module:fs#writefile","link":"<a href=\"module-fs.html#writefile\">writefile</a>","description":"<p>Writes the given data to a file, optionally truncated to the given amount\nof bytes.</p>\n<p>In case the given data is not a string, it is converted to a string before\nbeing written into the file. String values are written as-is, integer and\ndouble values are written in decimal notation, boolean values are written as\n<code>true</code> or <code>false</code> while arrays and objects are converted to their JSON\nrepresentation before being written into the file. The <code>null</code> value is\nrepresented by an empty string so <code>writefile(…, null)</code> would write an empty\nfile. Resource values are written in the form <code>&lt;type address&gt;</code>, e.g.\n<code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>If a file already exists at the given path, it is truncated. If no file\nexists, it is created with default permissions 0o666 masked by the currently\neffective umask.</p>\n<p>Returns the number of bytes written.</p>\n<p>Returns <code>null</code> if an error occurred, e.g. due to insufficient permissions.</p>"},{"title":"module:fs.FileStatResult","link":"<a href=\"module-fs.html#.FileStatResult\">FileStatResult</a>"},{"title":"module:fs.dir","link":"<a href=\"module-fs.dir.html\">dir</a>","description":"<p>Represents a handle for interacting with a directory opened by <code>opendir()</code>.</p>"},{"title":"module:fs.dir#close","link":"<a href=\"module-fs.dir.html#close\">close</a>","description":"<p>Closes the directory handle.</p>\n<p>Closes the underlying file descriptor referring to the opened directory.</p>\n<p>Returns <code>true</code> if the handle was properly closed.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.dir#error","link":"<a href=\"module-fs.dir.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs.dir#read","link":"<a href=\"module-fs.dir.html#read\">read</a>","description":"<p>Read the next entry from the open directory.</p>\n<p>Returns a string containing the entry name.</p>\n<p>Returns <code>null</code> if there are no more entries to read.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.dir#seek","link":"<a href=\"module-fs.dir.html#seek\">seek</a>","description":"<p>Set read position.</p>\n<p>Sets the read position within the open directory handle to the given offset\nvalue. The offset value should be obtained by a previous call to <code>tell()</code> as\nthe specific integer values are implementation defined.</p>\n<p>Returns <code>true</code> if the read position was set.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.dir#tell","link":"<a href=\"module-fs.dir.html#tell\">tell</a>","description":"<p>Obtain current read position.</p>\n<p>Returns the current read position in the open directory handle which can be\npassed back to the <code>seek()</code> function to return to this position. This is\nmainly useful to read an open directory handle (or specific items) multiple\ntimes.</p>\n<p>Returns an integer referring to the current position.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file","link":"<a href=\"module-fs.file.html\">file</a>","description":"<p>Represents a handle for interacting with a file opened by one of the file\nopen functions.</p>"},{"title":"module:fs.file#close","link":"<a href=\"module-fs.file.html#close\">close</a>","description":"<p>Closes the file handle.</p>\n<p>Upon calling <code>close()</code> on the handle, buffered data is flushed and the\nunderlying file descriptor is closed.</p>\n<p>Returns <code>true</code> if the handle was properly closed.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#error","link":"<a href=\"module-fs.file.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs.file#fileno","link":"<a href=\"module-fs.file.html#fileno\">fileno</a>","description":"<p>Obtains the number of the handle's underlying file descriptor.</p>\n<p>Returns the descriptor number.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.file#flush","link":"<a href=\"module-fs.file.html#flush\">flush</a>","description":"<p>Forces a write of all buffered data to the underlying handle.</p>\n<p>Returns <code>true</code> if the data was successfully flushed.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.file#isatty","link":"<a href=\"module-fs.file.html#isatty\">isatty</a>","description":"<p>Check for TTY.</p>\n<p>Checks whether the open file handle refers to a TTY (terminal) device.</p>\n<p>Returns <code>true</code> if the handle refers to a terminal.</p>\n<p>Returns <code>false</code> if the handle refers to another kind of file.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.file#read","link":"<a href=\"module-fs.file.html#read\">read</a>","description":"<p>Reads a chunk of data from the file handle.</p>\n<p>The length argument may be either a positive number of bytes to read, in\nwhich case the read call returns up to that many bytes, or a string to\nspecify a dynamic read size.</p>\n<ul>\n<li>\n<p>If length is a number, the method will read the specified number of bytes\nfrom the handle. Reading stops after the given amount of bytes or after\nencountering EOF, whatever comes first.</p>\n</li>\n<li>\n<p>If length is the string &quot;line&quot;, the method will read an entire line,\nterminated by &quot;\\n&quot; (a newline), from the handle. Reading stops at the next\nnewline or when encountering EOF. The returned data will contain the\nterminating newline character if one was read.</p>\n</li>\n<li>\n<p>If length is the string &quot;all&quot;, the method will read from the handle until\nencountering EOF and return the complete contents.</p>\n</li>\n<li>\n<p>If length is a single character string, the method will read from the\nhandle until encountering the specified character or upon encountering\nEOF. The returned data will contain the terminating character if one was\nread.</p>\n</li>\n</ul>\n<p>Returns a string containing the read data.</p>\n<p>Returns an empty string on EOF.</p>\n<p>Returns <code>null</code> if a read error occurred.</p>"},{"title":"module:fs.file#seek","link":"<a href=\"module-fs.file.html#seek\">seek</a>","description":"<p>Set file read position.</p>\n<p>Set the read position of the open file handle to the given offset and\nposition.</p>\n<p>Returns <code>true</code> if the read position was set.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#tell","link":"<a href=\"module-fs.file.html#tell\">tell</a>","description":"<p>Obtain current read position.</p>\n<p>Obtains the current, absolute read position of the open file.</p>\n<p>Returns an integer containing the current read offset in bytes.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.file#write","link":"<a href=\"module-fs.file.html#write\">write</a>","description":"<p>Writes a chunk of data to the file handle.</p>\n<p>In case the given data is not a string, it is converted to a string before\nbeing written into the file. String values are written as-is, integer and\ndouble values are written in decimal notation, boolean values are written as\n<code>true</code> or <code>false</code> while arrays and objects are converted to their JSON\nrepresentation before being written. The <code>null</code> value is represented by an\nempty string so <code>file.write(null)</code> would be a no-op. Resource values are\nwritten in the form <code>&lt;type address&gt;</code>, e.g. <code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>Returns the number of bytes written.</p>\n<p>Returns <code>null</code> if a write error occurred.</p>"},{"title":"module:fs.proc","link":"<a href=\"module-fs.proc.html\">proc</a>","description":"<p>Represents a handle for interacting with a program launched by <code>popen()</code>.</p>"},{"title":"module:fs.proc#close","link":"<a href=\"module-fs.proc.html#close\">close</a>","description":"<p>Closes the program handle and awaits program termination.</p>\n<p>Upon calling <code>close()</code> on the handle, the program's input or output stream\n(depending on the open mode) is closed. Afterwards, the function awaits the\ntermination of the underlying program and returns its exit code.</p>\n<ul>\n<li>\n<p>When the program was terminated by a signal, the return value will be the\nnegative signal number, e.g. <code>-9</code> for SIGKILL.</p>\n</li>\n<li>\n<p>When the program terminated normally, the return value will be the positive\nexit code of the program.</p>\n</li>\n</ul>\n<p>Returns a negative signal number if the program was terminated by a signal.</p>\n<p>Returns a positive exit code if the program terminated normally.</p>\n<p>Returns <code>null</code> if an error occurred.</p>"},{"title":"module:fs.proc#error","link":"<a href=\"module-fs.proc.html#error\">error</a>","description":"<p>Query error information.</p>\n<p>Returns a string containing a description of the last occurred error or\n<code>null</code> if there is no error information.</p>"},{"title":"module:fs.proc#fileno","link":"<a href=\"module-fs.proc.html#fileno\">fileno</a>","description":"<p>Obtains the number of the handle's underlying file descriptor.</p>\n<p>Returns the descriptor number.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.proc#flush","link":"<a href=\"module-fs.proc.html#flush\">flush</a>","description":"<p>Forces a write of all buffered data to the underlying handle.</p>\n<p>Returns <code>true</code> if the data was successfully flushed.</p>\n<p>Returns <code>null</code> on error.</p>"},{"title":"module:fs.proc#read","link":"<a href=\"module-fs.proc.html#read\">read</a>","description":"<p>Reads a chunk of data from the program handle.</p>\n<p>The length argument may be either a positive number of bytes to read, in\nwhich case the read call returns up to that many bytes, or a string to\nspecify a dynamic read size.</p>\n<ul>\n<li>\n<p>If length is a number, the method will read the specified number of bytes\nfrom the handle. Reading stops after the given amount of bytes or after\nencountering EOF, whatever comes first.</p>\n</li>\n<li>\n<p>If length is the string &quot;line&quot;, the method will read an entire line,\nterminated by &quot;\\n&quot; (a newline), from the handle. Reading stops at the next\nnewline or when encountering EOF. The returned data will contain the\nterminating newline character if one was read.</p>\n</li>\n<li>\n<p>If length is the string &quot;all&quot;, the method will read from the handle until\nencountering EOF and return the complete contents.</p>\n</li>\n<li>\n<p>If length is a single character string, the method will read from the\nhandle until encountering the specified character or upon encountering\nEOF. The returned data will contain the terminating character if one was\nread.</p>\n</li>\n</ul>\n<p>Returns a string containing the read data.</p>\n<p>Returns an empty string on EOF.</p>\n<p>Returns <code>null</code> if a read error occurred.</p>"},{"title":"module:fs.proc#write","link":"<a href=\"module-fs.proc.html#write\">write</a>","description":"<p>Writes a chunk of data to the program handle.</p>\n<p>In case the given data is not a string, it is converted to a string before\nbeing written to the program's stdin. String values are written as-is,\ninteger and double values are written in decimal notation, boolean values are\nwritten as <code>true</code> or <code>false</code> while arrays and objects are converted to their\nJSON representation before being written. The <code>null</code> value is represented by\nan empty string so <code>proc.write(null)</code> would be a no-op. Resource values are\nwritten in the form <code>&lt;type address&gt;</code>, e.g. <code>&lt;fs.file 0x7f60f0981760&gt;</code>.</p>\n<p>If resource, array or object values contain a <code>tostring()</code> function in their\nprototypes, then this function is invoked to obtain an alternative string\nrepresentation of the value.</p>\n<p>Returns the number of bytes written.</p>\n<p>Returns <code>null</code> if a write error occurred.</p>"},{"title":"module:math","link":"<a href=\"module-math.html\">math</a>","description":"<h1 id=\"mathematical-functions\">Mathematical Functions</h1>\n<p>The <code>math</code> module bundles various mathematical and trigonometrical functions.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { pow, rand } from 'math';\n\nlet x = pow(2, 5);\nlet y = rand();\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as math from 'math';\n\nlet x = math.pow(2, 5);\nlet y = math.rand();\n</code></pre>\n<p>Additionally, the math module namespace may also be imported by invoking the\n<code>ucode</code> interpreter with the <code>-lmath</code> switch.</p>"},{"title":"module:math#abs","link":"<a href=\"module-math.html#abs\">abs</a>","description":"<p>Returns the absolute value of the given numeric value.</p>"},{"title":"module:math#atan2","link":"<a href=\"module-math.html#atan2\">atan2</a>","description":"<p>Calculates the principal value of the arc tangent of <code>y</code>/<code>x</code>,\nusing the signs of the two arguments to determine the quadrant\nof the result.</p>\n<p>On success, this function returns the principal value of the arc\ntangent of <code>y</code>/<code>x</code> in radians; the return value is in the range [-pi, pi].</p>\n<ul>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is less than 0, +pi (-pi) is returned.</li>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is greater than 0, +0 (-0) is returned.</li>\n<li>If <code>y</code> is less than 0 and <code>x</code> is +0 or -0, -pi/2 is returned.</li>\n<li>If <code>y</code> is greater than 0 and <code>x</code> is +0 or -0, pi/2 is returned.</li>\n<li>If either <code>x</code> or <code>y</code> is NaN, a NaN is returned.</li>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is -0, +pi (-pi) is returned.</li>\n<li>If <code>y</code> is +0 (-0) and <code>x</code> is +0, +0 (-0) is returned.</li>\n<li>If <code>y</code> is a finite value greater (less) than 0, and <code>x</code> is negative\ninfinity, +pi (-pi) is returned.</li>\n<li>If <code>y</code> is a finite value greater (less) than 0, and <code>x</code> is positive\ninfinity, +0 (-0) is returned.</li>\n<li>If <code>y</code> is positive infinity (negative infinity), and <code>x</code> is finite,\npi/2 (-pi/2) is returned.</li>\n<li>If <code>y</code> is positive infinity (negative infinity) and <code>x</code> is negative\ninfinity, +3<em>pi/4 (-3</em>pi/4) is returned.</li>\n<li>If <code>y</code> is positive infinity (negative infinity) and <code>x</code> is positive\ninfinity, +pi/4 (-pi/4) is returned.</li>\n</ul>\n<p>When either <code>x</code> or <code>y</code> can't be converted to a numeric value, <code>NaN</code> is\nreturned.</p>"},{"title":"module:math#cos","link":"<a href=\"module-math.html#cos\">cos</a>","description":"<p>Calculates the cosine of <code>x</code>, where <code>x</code> is given in radians.</p>\n<p>Returns the resulting consine value.</p>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#exp","link":"<a href=\"module-math.html#exp\">exp</a>","description":"<p>Calculates the value of <code>e</code> (the base of natural logarithms)\nraised to the power of <code>x</code>.</p>\n<p>On success, returns the exponential value of <code>x</code>.</p>\n<ul>\n<li>If <code>x</code> is positive infinity, positive infinity is returned.</li>\n<li>If <code>x</code> is negative infinity, <code>+0</code> is returned.</li>\n<li>If the result underflows, a range error occurs, and zero is returned.</li>\n<li>If the result overflows, a range error occurs, and <code>Infinity</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#isnan","link":"<a href=\"module-math.html#isnan\">isnan</a>","description":"<p>Tests whether <code>x</code> is a <code>NaN</code> double.</p>\n<p>This functions checks whether the given argument is of type <code>double</code> with\na <code>NaN</code> (not a number) value.</p>\n<p>Returns <code>true</code> if the value is <code>NaN</code>, otherwise false.</p>\n<p>Note that a value can also be checked for <code>NaN</code> with the expression\n<code>x !== x</code> which only evaluates to <code>true</code> if <code>x</code> is <code>NaN</code>.</p>"},{"title":"module:math#log","link":"<a href=\"module-math.html#log\">log</a>","description":"<p>Calculates the natural logarithm of <code>x</code>.</p>\n<p>On success, returns the natural logarithm of <code>x</code>.</p>\n<ul>\n<li>If <code>x</code> is <code>1</code>, the result is <code>+0</code>.</li>\n<li>If <code>x</code> is positive nfinity, positive infinity is returned.</li>\n<li>If <code>x</code> is zero, then a pole error occurs, and the function\nreturns negative infinity.</li>\n<li>If <code>x</code> is negative (including negative infinity), then a domain\nerror occurs, and <code>NaN</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#pow","link":"<a href=\"module-math.html#pow\">pow</a>","description":"<p>Calculates the value of <code>x</code> raised to the power of <code>y</code>.</p>\n<p>On success, returns the value of <code>x</code> raised to the power of <code>y</code>.</p>\n<ul>\n<li>If the result overflows, a range error occurs, and the function\nreturns <code>Infinity</code>.</li>\n<li>If result underflows, and is not representable, a range error\noccurs, and <code>0.0</code> with the appropriate sign is returned.</li>\n<li>If <code>x</code> is <code>+0</code> or <code>-0</code>, and <code>y</code> is an odd integer less than <code>0</code>,\na pole error occurs <code>Infinity</code> is returned, with the same sign\nas <code>x</code>.</li>\n<li>If <code>x</code> is <code>+0</code> or <code>-0</code>, and <code>y</code> is less than <code>0</code> and not an odd\ninteger, a pole error occurs and <code>Infinity</code> is returned.</li>\n<li>If <code>x</code> is <code>+0</code> (<code>-0</code>), and <code>y</code> is an odd integer greater than <code>0</code>,\nthe result is <code>+0</code> (<code>-0</code>).</li>\n<li>If <code>x</code> is <code>0</code>, and <code>y</code> greater than <code>0</code> and not an odd integer,\nthe result is <code>+0</code>.</li>\n<li>If <code>x</code> is <code>-1</code>, and <code>y</code> is positive infinity or negative infinity,\nthe result is <code>1.0</code>.</li>\n<li>If <code>x</code> is <code>+1</code>, the result is <code>1.0</code> (even if <code>y</code> is <code>NaN</code>).</li>\n<li>If <code>y</code> is <code>0</code>, the result is <code>1.0</code> (even if <code>x</code> is <code>NaN</code>).</li>\n<li>If <code>x</code> is a finite value less than <code>0</code>, and <code>y</code> is a finite\nnoninteger, a domain error occurs, and <code>NaN</code> is returned.</li>\n<li>If the absolute value of <code>x</code> is less than <code>1</code>, and <code>y</code> is negative\ninfinity, the result is positive infinity.</li>\n<li>If the absolute value of <code>x</code> is greater than <code>1</code>, and <code>y</code> is\nnegative infinity, the result is <code>+0</code>.</li>\n<li>If the absolute value of <code>x</code> is less than <code>1</code>, and <code>y</code> is positive\ninfinity, the result is <code>+0</code>.</li>\n<li>If the absolute value of <code>x</code> is greater than <code>1</code>, and <code>y</code> is positive\ninfinity, the result is positive infinity.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> is an odd integer less than <code>0</code>,\nthe result is <code>-0</code>.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> less than <code>0</code> and not an odd\ninteger, the result is <code>+0</code>.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> is an odd integer greater than\n<code>0</code>, the result is negative infinity.</li>\n<li>If <code>x</code> is negative infinity, and <code>y</code> greater than <code>0</code> and not an odd\ninteger, the result is positive infinity.</li>\n<li>If <code>x</code> is positive infinity, and <code>y</code> less than <code>0</code>, the result is <code>+0</code>.</li>\n<li>If <code>x</code> is positive infinity, and <code>y</code> greater than <code>0</code>, the result is\npositive infinity.</li>\n</ul>\n<p>Returns <code>NaN</code> if either the <code>x</code> or <code>y</code> value can't be converted to a number.</p>"},{"title":"module:math#rand","link":"<a href=\"module-math.html#rand\">rand</a>","description":"<p>Produces a pseudo-random positive integer.</p>\n<p>Returns the calculated pseuo-random value. The value is within the range\n<code>0</code> to <code>RAND_MAX</code> inclusive where <code>RAND_MAX</code> is a platform specific value\nguaranteed to be at least <code>32767</code>.</p>\n<p>The {@link module:math~srand <code>srand()</code>} function sets its argument as the\nseed for a new sequence of pseudo-random integers to be returned by <code>rand()</code>. These sequences are\nrepeatable by calling {@link module:math~srand <code>srand()</code>} with the same\nseed value.</p>\n<p>If no seed value is explicitly set by calling\n{@link module:math~srand <code>srand()</code>} prior to the first call to <code>rand()</code>,\nthe math module will automatically seed the PRNG once, using the current\ntime of day in milliseconds as seed value.</p>"},{"title":"module:math#sin","link":"<a href=\"module-math.html#sin\">sin</a>","description":"<p>Calculates the sine of <code>x</code>, where <code>x</code> is given in radians.</p>\n<p>Returns the resulting sine value.</p>\n<ul>\n<li>When <code>x</code> is positive or negative infinity, a domain error occurs\nand <code>NaN</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#sqrt","link":"<a href=\"module-math.html#sqrt\">sqrt</a>","description":"<p>Calculates the nonnegative square root of <code>x</code>.</p>\n<p>Returns the resulting square root value.</p>\n<ul>\n<li>If <code>x</code> is <code>+0</code> (<code>-0</code>) then <code>+0</code> (<code>-0</code>) is returned.</li>\n<li>If <code>x</code> is positive infinity, positive infinity is returned.</li>\n<li>If <code>x</code> is less than <code>-0</code>, a domain error occurs, and <code>NaN</code> is returned.</li>\n</ul>\n<p>Returns <code>NaN</code> if the <code>x</code> value can't be converted to a number.</p>"},{"title":"module:math#srand","link":"<a href=\"module-math.html#srand\">srand</a>","description":"<p>Seeds the pseudo-random number generator.</p>\n<p>This functions seeds the PRNG with the given value and thus affects the\npseudo-random integer sequence produced by subsequent calls to\n{@link module:math~rand <code>rand()</code>}.</p>\n<p>Setting the same seed value will result in the same pseudo-random numbers\nproduced by {@link module:math~rand <code>rand()</code>}.</p>"},{"title":"module:struct","link":"<a href=\"module-struct.html\">struct</a>","description":"<h1 id=\"handle-packed-binary-data\">Handle Packed Binary Data</h1>\n<p>The <code>struct</code> module provides routines for interpreting byte strings as packed\nbinary data.</p>\n<p>Functions can be individually imported and directly accessed using the\n{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#named_import named import}\nsyntax:</p>\n<pre class=\"prettyprint source\"><code>import { pack, unpack } from 'struct';\n\nlet buffer = pack('bhl', -13, 1234, 444555666);\nlet values = unpack('bhl', buffer);\n</code></pre>\n<p>Alternatively, the module namespace can be imported\nusing a wildcard import statement:</p>\n<pre class=\"prettyprint source\"><code>import * as struct from 'struct';\n\nlet buffer = struct.pack('bhl', -13, 1234, 444555666);\nlet values = struct.unpack('bhl', buffer);\n</code></pre>\n<p>Additionally, the struct module namespace may also be imported by invoking\nthe <code>ucode</code> interpreter with the <code>-lstruct</code> switch.</p>\n<h2 id=\"format-strings\">Format Strings</h2>\n<p>Format strings describe the data layout when packing and unpacking data.\nThey are built up from format-characters, which specify the type of data\nbeing packed/unpacked. In addition, special characters control the byte\norder, size and alignment.</p>\n<p>Each format string consists of an optional prefix character which describes\nthe overall properties of the data and one or more format characters which\ndescribe the actual data values and padding.</p>\n<h3 id=\"byte-order%2C-size%2C-and-alignment\">Byte Order, Size, and Alignment</h3>\n<p>By default, C types are represented in the machine's native format and byte\norder, and properly aligned by skipping pad bytes if necessary (according to\nthe rules used by the C compiler).</p>\n<p>This behavior is chosen so that the bytes of a packed struct correspond\nexactly to the memory layout of the corresponding C struct.</p>\n<p>Whether to use native byte ordering and padding or standard formats depends\non the application.</p>\n<p>Alternatively, the first character of the format string can be used to indicate\nthe byte order, size and alignment of the packed data, according to the\nfollowing table:</p>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Byte order</th>\n<th>Size</th>\n<th>Alignment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@</code></td>\n<td>native</td>\n<td>native</td>\n<td>native</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>native</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>little-endian</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>big-endian</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n<tr>\n<td><code>!</code></td>\n<td>network (= big-endian)</td>\n<td>standard</td>\n<td>none</td>\n</tr>\n</tbody>\n</table>\n<p>If the first character is not one of these, <code>'@'</code> is assumed.</p>\n<p>Native byte order is big-endian or little-endian, depending on the\nhost system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are\nlittle-endian; IBM z and many legacy architectures are big-endian.</p>\n<p>Native size and alignment are determined using the C compiler's\n<code>sizeof</code> expression. This is always combined with native byte order.</p>\n<p>Standard size depends only on the format character; see the table in\nthe <code>format-characters</code> section.</p>\n<p>Note the difference between <code>'@'</code> and <code>'='</code>: both use native byte order,\nbut the size and alignment of the latter is standardized.</p>\n<p>The form <code>'!'</code> represents the network byte order which is always big-endian\nas defined in <code>IETF RFC 1700</code>.</p>\n<p>There is no way to indicate non-native byte order (force byte-swapping); use\nthe appropriate choice of <code>'&lt;'</code> or <code>'&gt;'</code>.</p>\n<p>Notes:</p>\n<p>(1) Padding is only automatically added between successive structure members.\nNo padding is added at the beginning or the end of the encoded struct.</p>\n<p>(2) No padding is added when using non-native size and alignment, e.g.\nwith '&lt;', '&gt;', '=', and '!'.</p>\n<p>(3) To align the end of a structure to the alignment requirement of a\nparticular type, end the format with the code for that type with a repeat\ncount of zero.</p>\n<h3 id=\"format-characters\">Format Characters</h3>\n<p>Format characters have the following meaning; the conversion between C and\nucode values should be obvious given their types.  The 'Standard size' column\nrefers to the size of the packed value in bytes when using standard size;\nthat is, when the format string starts with one of <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'!'</code> or\n<code>'='</code>.  When using native size, the size of the packed value is platform\ndependent.</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>C Type</th>\n<th>Ucode type</th>\n<th>Standard size</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>x</code></td>\n<td><em>pad byte</em></td>\n<td><em>no value</em></td>\n<td></td>\n<td>(7)</td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td><code>char</code></td>\n<td>string</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td><code>signed char</code></td>\n<td>int</td>\n<td>1</td>\n<td>(1), (2)</td>\n</tr>\n<tr>\n<td><code>B</code></td>\n<td><code>unsigned char</code></td>\n<td>int</td>\n<td>1</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td><code>_Bool</code></td>\n<td>bool</td>\n<td>1</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td><code>h</code></td>\n<td><code>short</code></td>\n<td>int</td>\n<td>2</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>H</code></td>\n<td><code>unsigned short</code></td>\n<td>int</td>\n<td>2</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td><code>int</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>I</code></td>\n<td><code>unsigned int</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>l</code></td>\n<td><code>long</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>L</code></td>\n<td><code>unsigned long</code></td>\n<td>int</td>\n<td>4</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>q</code></td>\n<td><code>long long</code></td>\n<td>int</td>\n<td>8</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>Q</code></td>\n<td><code>unsigned long long</code></td>\n<td>int</td>\n<td>8</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td><code>n</code></td>\n<td><code>ssize_t</code></td>\n<td>int</td>\n<td></td>\n<td>(3)</td>\n</tr>\n<tr>\n<td><code>N</code></td>\n<td><code>size_t</code></td>\n<td>int</td>\n<td></td>\n<td>(3)</td>\n</tr>\n<tr>\n<td><code>e</code></td>\n<td>(6)</td>\n<td>double</td>\n<td>2</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td><code>float</code></td>\n<td>double</td>\n<td>4</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td><code>double</code></td>\n<td>double</td>\n<td>8</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td><code>s</code></td>\n<td><code>char[]</code></td>\n<td>double</td>\n<td></td>\n<td>(9)</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td><code>char[]</code></td>\n<td>double</td>\n<td></td>\n<td>(8)</td>\n</tr>\n<tr>\n<td><code>P</code></td>\n<td><code>void *</code></td>\n<td>int</td>\n<td></td>\n<td>(5)</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td><code>char[]</code></td>\n<td>string</td>\n<td></td>\n<td>(10)</td>\n</tr>\n</tbody>\n</table>\n<p>Notes:</p>\n<ul>\n<li>\n<p>(1) The <code>'?'</code> conversion code corresponds to the <code>_Bool</code> type defined by\nC99. If this type is not available, it is simulated using a <code>char</code>. In\nstandard mode, it is always represented by one byte.</p>\n</li>\n<li>\n<p>(2) When attempting to pack a non-integer using any of the integer\nconversion codes, this module attempts to convert the given value into an\ninteger. If the value is not convertible, a type error exception is thrown.</p>\n</li>\n<li>\n<p>(3) The <code>'n'</code> and <code>'N'</code> conversion codes are only available for the native\nsize (selected as the default or with the <code>'@'</code> byte order character).\nFor the standard size, you can use whichever of the other integer formats\nfits your application.</p>\n</li>\n<li>\n<p>(4) For the <code>'f'</code>, <code>'d'</code> and <code>'e'</code> conversion codes, the packed\nrepresentation uses the IEEE 754 binary32, binary64 or binary16 format\n(for <code>'f'</code>, <code>'d'</code> or <code>'e'</code> respectively), regardless of the floating-point\nformat used by the platform.</p>\n</li>\n<li>\n<p>(5) The <code>'P'</code> format character is only available for the native byte\nordering (selected as the default or with the <code>'@'</code> byte order character).\nThe byte order character <code>'='</code> chooses to use little- or big-endian\nordering based on the host system. The struct module does not interpret\nthis as native ordering, so the <code>'P'</code> format is not available.</p>\n</li>\n<li>\n<p>(6) The IEEE 754 binary16 &quot;half precision&quot; type was introduced in the 2008\nrevision of the <code>IEEE 754</code> standard. It has a sign bit, a 5-bit exponent\nand 11-bit precision (with 10 bits explicitly stored), and can represent\nnumbers between approximately <code>6.1e-05</code> and <code>6.5e+04</code> at full precision.\nThis type is not widely supported by C compilers: on a typical machine, an\nunsigned short can be used for storage, but not for math operations. See\nthe Wikipedia page on the <code>half-precision floating-point format</code> for more\ninformation.</p>\n</li>\n<li>\n<p>(7) When packing, <code>'x'</code> inserts one NUL byte.</p>\n</li>\n<li>\n<p>(8) The <code>'p'</code> format character encodes a &quot;Pascal string&quot;, meaning a short\nvariable-length string stored in a <em>fixed number of bytes</em>, given by the\ncount. The first byte stored is the length of the string, or 255,\nwhichever is smaller.  The bytes of the string follow.  If the string\npassed in to <code>pack()</code> is too long (longer than the count minus 1), only\nthe leading <code>count-1</code> bytes of the string are stored.  If the string is\nshorter than <code>count-1</code>, it is padded with null bytes so that exactly count\nbytes in all are used.  Note that for <code>unpack()</code>, the <code>'p'</code> format\ncharacter consumes <code>count</code> bytes, but that the string returned can never\ncontain more than 255 bytes.</p>\n</li>\n<li>\n<p>(9) For the <code>'s'</code> format character, the count is interpreted as the length\nof the bytes, not a repeat count like for the other format characters; for\nexample, <code>'10s'</code> means a single 10-byte string mapping to or from a single\nucode byte string, while <code>'10c'</code> means 10 separate one byte character\nelements (e.g., <code>cccccccccc</code>) mapping to or from ten different ucode byte\nstrings. If a count is not given, it defaults to 1. For packing, the\nstring is truncated or padded with null bytes as appropriate to make it\nfit. For unpacking, the resulting bytes object always has exactly the\nspecified number of bytes.  As a special case, <code>'0s'</code> means a single,\nempty string (while <code>'0c'</code> means 0 characters).</p>\n</li>\n<li>\n<p>(10) The <code>*</code> format character serves as wildcard. For <code>pack()</code> it will\nappend the corresponding byte argument string as-is, not applying any\npadding or zero filling. When a repeat count is given, that many bytes of\nthe input byte string argument will be appended at most on <code>pack()</code>,\neffectively truncating longer input strings. For <code>unpack()</code>, the wildcard\nformat will yield a byte string containing the entire remaining input data\nbytes, or - when a repeat count is given - that many bytes of input data\nat most.</p>\n</li>\n</ul>\n<p>A format character may be preceded by an integral repeat count.  For example,\nthe format string <code>'4h'</code> means exactly the same as <code>'hhhh'</code>.</p>\n<p>Whitespace characters between formats are ignored; a count and its format\nmust not contain whitespace though.</p>\n<p>When packing a value <code>x</code> using one of the integer formats (<code>'b'</code>,\n<code>'B'</code>, <code>'h'</code>, <code>'H'</code>, <code>'i'</code>, <code>'I'</code>, <code>'l'</code>, <code>'L'</code>,\n<code>'q'</code>, <code>'Q'</code>), if <code>x</code> is outside the valid range for that format, a type\nerror exception is raised.</p>\n<p>For the <code>'?'</code> format character, the return value is either <code>true</code> or <code>false</code>.\nWhen packing, the truish result value of the argument is used. Either 0 or 1\nin the native or standard bool representation will be packed, and any\nnon-zero value will be <code>true</code> when unpacking.</p>\n<h2 id=\"examples\">Examples</h2>\n<p>Note:\nNative byte order examples (designated by the <code>'@'</code> format prefix or\nlack of any prefix character) may not match what the reader's\nmachine produces as\nthat depends on the platform and compiler.</p>\n<p>Pack and unpack integers of three different sizes, using big endian\nordering:</p>\n<pre class=\"prettyprint source\"><code>import { pack, unpack } from 'struct';\n\npack(&quot;>bhl&quot;, 1, 2, 3);  // &quot;\\x01\\x00\\x02\\x00\\x00\\x00\\x03&quot;\nunpack(&quot;>bhl&quot;, &quot;\\x01\\x00\\x02\\x00\\x00\\x00\\x03&quot;);  // [ 1, 2, 3 ]\n</code></pre>\n<p>Attempt to pack an integer which is too large for the defined field:</p>\n<pre class=\"prettyprint source lang-bash\"><code>$ ucode -lstruct -p 'struct.pack(&quot;>h&quot;, 99999)'\nType error: Format 'h' requires numeric argument between -32768 and 32767\nIn [-p argument], line 1, byte 24:\n\n `struct.pack(&quot;>h&quot;, 99999)`\n  Near here -------------^\n</code></pre>\n<p>Demonstrate the difference between <code>'s'</code> and <code>'c'</code> format characters:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;@ccc&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;);  // &quot;123&quot;\npack(&quot;@3s&quot;, &quot;123&quot;);           // &quot;123&quot;\n</code></pre>\n<p>The ordering of format characters may have an impact on size in native\nmode since padding is implicit. In standard mode, the user is\nresponsible for inserting any desired padding.</p>\n<p>Note in the first <code>pack()</code> call below that three NUL bytes were added after\nthe packed <code>'#'</code> to align the following integer on a four-byte boundary.\nIn this example, the output was produced on a little endian machine:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;@ci&quot;, &quot;#&quot;, 0x12131415);  // &quot;#\\x00\\x00\\x00\\x15\\x14\\x13\\x12&quot;\npack(&quot;@ic&quot;, 0x12131415, &quot;#&quot;);  // &quot;\\x15\\x14\\x13\\x12#&quot;\n</code></pre>\n<p>The following format <code>'ih0i'</code> results in two pad bytes being added at the\nend, assuming the platform's ints are aligned on 4-byte boundaries:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;ih0i&quot;, 0x01010101, 0x0202);  // &quot;\\x01\\x01\\x01\\x01\\x02\\x02\\x00\\x00&quot;\n</code></pre>\n<p>Use the wildcard format to extract the remainder of the input data:</p>\n<pre class=\"prettyprint source\"><code>import { unpack } from 'struct';\n\nunpack(&quot;ccc*&quot;, &quot;foobarbaz&quot;);   // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot;, &quot;barbaz&quot; ]\nunpack(&quot;ccc3*&quot;, &quot;foobarbaz&quot;);  // [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot;, &quot;bar&quot; ]\n</code></pre>\n<p>Use the wildcard format to pack binary stings as-is into the result data:</p>\n<pre class=\"prettyprint source\"><code>import { pack } from 'struct';\n\npack(&quot;h*h&quot;, 0x0101, &quot;\\x02\\x00\\x03&quot;, 0x0404);  // &quot;\\x01\\x01\\x02\\x00\\x03\\x04\\x04&quot;\npack(&quot;c3*c&quot;, &quot;a&quot;, &quot;foobar&quot;, &quot;c&quot;);  // &quot;afooc&quot;\n</code></pre>"},{"title":"module:struct#new","link":"<a href=\"module-struct.html#new\">new</a>","description":"<p>Precompile format string.</p>\n<p>The <code>new()</code> function precompiles the given format string argument and returns\na <code>struct</code> object instance useful for packing and unpacking multiple items\nwithout having to recompute the internal format each time.</p>\n<p>Returns an precompiled struct format instance.</p>\n<p>Raises a runtime exception if the format string is invalid.</p>"},{"title":"module:struct#pack","link":"<a href=\"module-struct.html#pack\">pack</a>","description":"<p>Pack given values according to specified format.</p>\n<p>The <code>pack()</code> function creates a byte string containing the argument values\npacked according to the given format string.</p>\n<p>Returns the packed string.</p>\n<p>Raises a runtime exception if a given argument value does not match the\nrequired type of the corresponding format string directive or if and invalid\nformat string is provided.</p>"},{"title":"module:struct#unpack","link":"<a href=\"module-struct.html#unpack\">unpack</a>","description":"<p>Unpack given byte string according to specified format.</p>\n<p>The <code>unpack()</code> function interpretes a byte string according to the given\nformat string and returns the resulting values. If the optional offset\nargument is given, unpacking starts from this byte position within the input.\nIf not specified, the start offset defaults to <code>0</code>, the start of the given\ninput string.</p>\n<p>Returns an array of unpacked values.</p>\n<p>Raises a runtime exception if the format string is invalid or if an invalid\ninput string or offset value is given.</p>"},{"title":"module:struct.instance","link":"<a href=\"module-struct.instance.html\">instance</a>","description":"<p>Represents a struct instance created by <code>new()</code>.</p>"},{"title":"module:struct.instance#pack","link":"<a href=\"module-struct.instance.html#pack\">pack</a>","description":"<p>Pack given values.</p>\n<p>The <code>pack()</code> function creates a byte string containing the argument values\npacked according to the given format instance.</p>\n<p>Returns the packed string.</p>\n<p>Raises a runtime exception if a given argument value does not match the\nrequired type of the corresponding format string directive.</p>"},{"title":"module:struct.instance#unpack","link":"<a href=\"module-struct.instance.html#unpack\">unpack</a>","description":"<p>Unpack given byte string.</p>\n<p>The <code>unpack()</code> function interpretes a byte string according to the given\nformat instance and returns the resulting values. If the optional offset\nargument is given, unpacking starts from this byte position within the input.\nIf not specified, the start offset defaults to <code>0</code>, the start of the given\ninput string.</p>\n<p>Returns an array of unpacked values.</p>\n<p>Raises a runtime exception if an invalid input string or offset value is\ngiven.</p>"}]}